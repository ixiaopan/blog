<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>NLP on </title>
		<link>https://ixiaopan.github.io/blog/categories/nlp/</link>
		<description>Recent content in NLP </description>
		<generator>Hugo -- gohugo.io</generator>
		
  		<language>en</language>
		
		<managingEditor>Page(/categories/nlp) (ixiaopan)</managingEditor>
    	
  		<lastBuildDate>Wed, 17 Nov 2021 00:00:00 +0000</lastBuildDate>
		
		<atom:link href="/blog/categories/nlp/" rel="self" type="application/rss+xml" />
		
		<item>
			<title>D - 基建 101</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-15/</link>
			<pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-15/</guid>
			<description>&lt;p&gt;这半年做了不少的前端基建，虽说系统迷你且有诸多问题，远达不到业界优秀开源的地步，起码目前是满足内部需要。再说罗马也不是一日建成的，先从简单的系统开始，再根据业务情况不断的扩展，在这个阶段，其实自己也能学到很多知识。毕竟以前都是用别人开发好的工具，现在要自己写，不管系统多小，都要自己去理解去设计，所以整个开发过程其实会进一步加深对基建的理解。&lt;/p&gt;</description>
		</item>
      	
		<item>
			<title>D - 基建 业务开关配置</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-16/</link>
			<pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-16/</guid>
			<description>先说一下最简单的开关配置吧
Background 业务经常会有这种情况，对某个 id 先隐藏某个功能，待时机成熟在放开，此外这个白名单还可能随时追加。一般后端都有配置表，前端很少有。做这个开关就是实现这样的功能，当然，作用远不止如此，比如开关还可以当做数据配置平台，给运营使用用来实时更新页面数据等。
How 要实现的功能：基于用户的配置，生成一个基于 JSON 的文件 url，提供给业务方使用
UI   新建一个项目
 输入 projectId、projectName, projectDesc    创建成功，新建一个开关配置
 输入 id、name 选择 类型（boolean or text) 输入内容    点击保存，生成一个 json 文件的 url，比如 https://xx.oss-xx/project-config.json
  业务引入这个 json 解析内容，使用即可
  数据 项目 项目除了自身的必要字段(id/name/desc)之外，还保存着开关列表、配置表的 url 这2个重要信息
{ id: String, // 项目ID  name: String, // 项目名  desc: String, // 项目描述  config: ISwitch[] // 开关列表  url: String, // json配置文件url，系统生成 } 需要注意 url 是平台自动生成的，不用手动配置，比如我们可以使用 projectId 作为配置文件的 url，e.</description>
		</item>
      	
		<item>
			<title>D - Axios</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-14/</link>
			<pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-14/</guid>
			<description></description>
		</item>
      	
		<item>
			<title>D - Permission</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-09/</link>
			<pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-09/</guid>
			<description></description>
		</item>
      	
		<item>
			<title>D - The track panel of a video editor</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-06/</link>
			<pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-06/</guid>
			<description>&lt;p&gt;In the previous post, we have learned how to design a video player. In fact, a video player is a container containing many tracks, such as bgm, text, and so on. Can we show and edit these tracks? Of course we can. But today, we will focus on the &lt;code&gt;UI&lt;/code&gt; part. For the edit operation, we will talk it later.&lt;/p&gt;</description>
		</item>
      	
		<item>
			<title>D - Things about frames</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-05/</link>
			<pubDate>Thu, 22 Jun 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-05/</guid>
			<description>&lt;p&gt;Speaking of images and videos, we often use &lt;code&gt;img/video&lt;/code&gt; to preview them. However, there are more ways to do this. Today we will introduce some new preview techniques based on frames, such as frame-based video preview, drawing continuous frames over a time, and extract any frame of a gif image.&lt;/p&gt;</description>
		</item>
      	
		<item>
			<title>D - Design a Video Player</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-04/</link>
			<pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-04/</guid>
			<description>&lt;p&gt;业务最开始实现的视频播放功能用的是 &lt;code&gt;xgplayer&lt;/code&gt; 插件，这个插件比较重，更侧重于直播。而我们业务所需要的仅仅是一个美化版本的 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;，为此，我们需要基于 &lt;code&gt;video api&lt;/code&gt; 实现自己的播放器。&lt;/p&gt;</description>
		</item>
      	
		<item>
			<title>D - Build your own UI component library from scratch</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-03/</link>
			<pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-03/</guid>
			<description>&lt;p&gt;In this post, we will learn how to build your own UI component library based on monorepo.&lt;/p&gt;</description>
		</item>
      	
		<item>
			<title>D - Frontend Project Structure</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-02/</link>
			<pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-02/</guid>
			<description>&lt;p&gt;本文主要介绍一下当下 &lt;code&gt;general&lt;/code&gt; &amp;amp; &lt;code&gt;vue-based&lt;/code&gt; 前端项目结构划分&lt;/p&gt;</description>
		</item>
      	
		<item>
			<title>D - 101</title>
			<link>https://ixiaopan.github.io/blog/post/fe-d-01/</link>
			<pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
			<guid>https://ixiaopan.github.io/blog/post/fe-d-01/</guid>
			<description>&lt;p&gt;从今天开始，计划写一系列技术文章，总结这一年半来重新回归到前端这个职业期间所做的事情，我给这个系列命名为 &lt;code&gt;D&lt;/code&gt;&lt;/p&gt;</description>
		</item>
      	
	</channel>
</rss>
