<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xiaopan&#39;s blog</title>
    <link>https://ixiaopan.github.io/blog/post/</link>
    <description>Recent content in Posts on xiaopan&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ixiaopan.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[WIP] Koa</title>
      <link>https://ixiaopan.github.io/blog/post/fe/koa/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/koa/</guid>
      <description>middleware </description>
    </item>
    
    <item>
      <title>[WIP] 《Micro Frontends in Action》</title>
      <link>https://ixiaopan.github.io/blog/post/fe/mfe/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/mfe/</guid>
      <description>Micro Frontend 原理 框架 Reference</description>
    </item>
    
    <item>
      <title>Modules</title>
      <link>https://ixiaopan.github.io/blog/post/fe/module/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/module/</guid>
      <description>Module 模块的作用 类似命名空间的上下文隔离，避免各个功能模块间的变量冲突 支持模块间的引用即依赖，避免把需要用到的变量、方法等提升到全局作用域 主流方</description>
    </item>
    
    <item>
      <title>Promise/Async/Generator</title>
      <link>https://ixiaopan.github.io/blog/post/fe/async/</link>
      <pubDate>Fri, 15 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/async/</guid>
      <description>Promise executor console.log(&amp;#39;1&amp;#39;) let promise = new Promise(function(resolve, reject) { console.log(&amp;#39;2&amp;#39;) setTimeout(() =&amp;gt; { resolve(&amp;#34;done&amp;#34;) resolve(&amp;#39;ok&amp;#39;) // ignored reject(&amp;#34;my error&amp;#34;) // ignored }, 1000) }) promise.then((val) =&amp;gt; { console.log(&amp;#39;val: &amp;#39;, val) }) // 1, 2, val: done executor() 会同步执行 executor() 接收2个参数：resolve, reject 任务成功调用 resolve(val) 失败则</description>
    </item>
    
    <item>
      <title>《Effective JavaScript》</title>
      <link>https://ixiaopan.github.io/blog/post/fe/read-effective-js/</link>
      <pubDate>Thu, 14 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/read-effective-js/</guid>
      <description>floating-point numbers Number 类型 follow IEE 754 的规范，即双精度浮点数， 浮点数运算会造成误差，比如 0.1 + 0.2 // 0.30000000000000004 能表示的安全整数的范围大小在 [-2^53 + 1, 2^53 - 1] 之间，在此范围内的整数，</description>
    </item>
    
    <item>
      <title>CSS Box Model</title>
      <link>https://ixiaopan.github.io/blog/post/fe/css-box-model/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/css-box-model/</guid>
      <description>新开一个系列，从 w3c spec 的角度梳理 CSS 知识点，先从 box model 开始。 box model css 把文档树中的每个元素描述为一个 box，通过相关的属性决定每个 box 的大小、位置、在画</description>
    </item>
    
    <item>
      <title>Audio Sprite</title>
      <link>https://ixiaopan.github.io/blog/post/fe/audio-sprite/</link>
      <pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/audio-sprite/</guid>
      <description>Background 业务中遇到一个 tts 生成音频并播放的需求，为了节省 tts 生成成本，属于同一个音色的所有文案会生成同一个音频文件，但是前端要按正常的顺序播放。举个例</description>
    </item>
    
    <item>
      <title>Polling</title>
      <link>https://ixiaopan.github.io/blog/post/fe/poll/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/poll/</guid>
      <description>业务中或多或少会遇到服务端无法立刻返回结果的情况，一般解决方案是轮询接口 Polling，但除此之外，还有其他数据推送方案，比如 Long Pollin</description>
    </item>
    
    <item>
      <title>《Game Programming Patterns》</title>
      <link>https://ixiaopan.github.io/blog/post/fe/read-pattern/</link>
      <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/read-pattern/</guid>
      <description>最近了读了关于设计模式的一本书，《Game Programming Patterns》虽然是说游戏的，但书中介绍的设计模式在 web 开发中也很常见，比如 singleton/observer/dirty check 等。不过由于书</description>
    </item>
    
    <item>
      <title>服务端实现</title>
      <link>https://ixiaopan.github.io/blog/post/fe/infras-server/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://ixiaopan.github.io/blog/post/fe/infras-server/</guid>
      <description>Background 前面一系列关于基建的文章主要侧重子模块的实现，但是技术选型还没有确定，此外虽然模块功能已经确定，但还缺少服务端必不可少的基础服务，比如日志</description>
    </item>
    
  </channel>
</rss>
